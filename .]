#!/usr/bin/env python
import glob
from pathlib import Path
from snakemake.utils import min_version

shell.prefix("set -o pipefail; umask 002; ")  # set g+w

if not os.path.exists("panel"):
    os.makedirs("panel")

gene_descs= [
    '/mnt/slivar/pLI_lookup.txt',
    '/mnt/slivar/oe_lof_upper_lookup.txt',
    '/mnt/slivar/oe_mis_upper_lookup.txt',
    '/mnt/slivar/oe_syn_upper_lookup.txt',
    '/mnt/slivar/clinvar_gene_desc.txt',
    '/mnt/slivar/hgncSymbol.inheritance.tsv',
    '/mnt/slivar/lookup_description_symbol.txt'
    ]

rule all:
     input:
         "panel/gp2_panel.db"   

rule filter_frq:
    input:
        vcf = "final_vcfs/GP2_annotate.vcf.gz",
        bed = "inputs/PD_panel_all_hg38.bed"   #include both core and extensive panels
    output:
        "panel/GP2_annotate_filtered.vcf.gz"
    container:
        "docker://zihhuafang/slivar_modified:0.2.7"
    params:
        gene_desc = "".join([f"-g {x} " for x in gene_descs])
    resources:
        nodes = 1
    shell:
        """
        slivar expr --vcf {input} \
                    -o {output} \
                    --js slivar/slivar-functions.js \
                    --pass-only \
                    --info 'INFO.gnomad_AF < 0.05 && variant.ALT[0] != "*" && variant.call_rate > 0.95' \
                    --region {input.bed} 
        """

fields = [
    'MLEAC',
    'AF',
    'AC',
    'AN',
    'gnomad_AF',
    'gnomad_popmax_af',
    'gnomad_nhomalt',
    'gnomad_AC',
    'TOPMed8_AF',
    'CADD_PHRED',
    'GP2_affected_gt',
    'GP2_unaffected_gt',
    'amp_pd_cases_gt',
    'Cases',
    'Controls',
    'CNCR'
    ]

rule vcf2db:
    input:
        rules.filter_frq.output
    output:
        "panel/gp2_panel.db"
    params: 
        info = "".join([f"--a-ok {x} " for x in fields])
    conda:
        "../envs/vcf2db.yml"
    resources:
        nodes = 1
    shell:
        """
        vcf2db.py --expand gt_quals --expand gt_depths --expand gt_alt_depths --expand gt_ref_depths --expand gt_types \
        {params.info} \
        {input.vcf} {config[gp2_ped]} {output}
        """
        

out_fields= [
    'start',
    'end',
    'ref',
    'alt',
    'gene',
    'transcript',
    'strand',
    'is_canonical',
    'is_coding',
    'is_exonic',
    'is_lof',
    'is_splicing',
    'exon',
    'HGVSc',
    'HGVSp',
    'impact',
    'impact_so',
    'impact_severity',
    'CADD_PHRED',
    'CNCR',
    'ClinVar_CLNSIG',
    'ClinVar_CLNDN',
    'VAR_SYNONYMS',
    'existing_variation',
    'gnomad_AF',
    'gnomad_popmax_af',
    'gnomad_nhomalt',
    'gnomad_AC',
    'TOPMed8_AF',
    'GP2_affected_gt',
    'GP2_unaffected_gt',
    'amp_pd_cases_gt',
    'SpliceAI_pred_DS_AG',
    'SpliceAI_pred_DS_AL',
    'SpliceAI_pred_DS_DG',
    'SpliceAI_pred_DS_DL',
    'SpliceAI_pred_SYMBOL',
    'existing_InFrame_oORFs',
    'existing_OutOfFrame_oORFs',
    'existing_uORFs',
    'five_prime_UTR_variant_annotation',
    'five_prime_UTR_variant_consequence'
    ]

rule gemini_query:
    input:
        rules.vcf2db.output
    output:
        "panel/gp2_PD_panel.txt"
    params:
        ### check how to do it with gemini
        columns = "".join([f",{x}" for x in out_fields]),
        genes = "inputs/PD_panel_all.list"
    container:
        "docker://"
    resources:
        nodes = 1
    shell:
        """
        genes=$(cat {params.genes} | sed "s/\r//;s/^\|$/'/g" | paste -sd,)
        
        gemini query --header --show-samples --sample-filter "phenotype=2" \
                     -q "select chrom {params.columns} ,"last_column"\
                     FROM variants \
                     WHERE (impact) \
                     AND (gene) \
               {input} > {output}
         """
